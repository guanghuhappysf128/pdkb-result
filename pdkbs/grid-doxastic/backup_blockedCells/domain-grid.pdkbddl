
    (:types pos survivor)
    (:constants)
    (:predicates
       {AK}(at ?ag - agent ?p - pos)
       {AK}(succ ?p1 - pos ?p2 - pos)
        {AK}(checked ?p - pos)
            (blocked ?p - pos)
           (hiddenblockedcell ?p - pos)
           (survivorat ?s - survivor ?p - pos)
           (hiddensurvivorat ?s - survivor ?p - pos)
        {AK}(obs ?p - pos)
            (obss ?p - pos) ; -- to force planner to communicate (communicating all baseline)
            (msg ?p - pos)   ;   -- to force planner to communicate (communicating all baseline)
        

    )


     (:action sensecells
        :derive-condition   always
        :parameters         (?ag - agent ?p1 ?p2 - pos)
        :precondition       (and (at ?ag ?p1) (succ ?p1 ?p2)); (not(checked ?p2)) ) 
        :effect             (and (when (hiddenblockedcell ?p2) [?ag](blocked ?p2))
                                 (when (not(hiddenblockedcell ?p2)) [?ag](!blocked ?p2)) 
                                 (checked ?p2)
                            )
             
    )


   
   (:action move
        :derive-condition   always
        :parameters         (?ag - agent ?p1 ?p2 - pos)
        :precondition       (and (at ?ag ?p1) (succ ?p1 ?p2) [?ag](!blocked ?p2) (checked ?p2))
        :effect             (and (at ?ag ?p2) (not(at ?ag ?p1)))
                            
    )




   (:action communcells
      :derive-condition   always
      :parameters         (?p1 ?p2 - pos ?ag1 - agent)
      :precondition       (and (at ?ag1 ?p1) (succ ?p1 ?p2) [?ag1](!blocked ?p2) (checked ?p2))
      :effect             (and (obss ?p2)
                               (forall ?ag2 - agent
                                       [?ag2](!blocked ?p2))

                          )
                         
    )

    
    (:action sensesurvivors
       :derive-condition   always
       :parameters         (?ag - agent ?p - pos ?s - survivor)
       :precondition       (and(at ?ag ?p) (not(obs ?p))) 
       :effect             (and(when (hiddensurvivorat ?s ?p) [?ag](survivorat ?s ?p)) 
                               (when (not(hiddensurvivorat ?s ?p)) [?ag](!survivorat ?s ?p))
                               (obs ?p))
                                
    )


    (:action commsurvivor
      :derive-condition   always
      :parameters         (?p - pos ?a - agent  ?s - survivor)
      :precondition       (and (at ?a ?p) [?a](survivorat ?s ?p)) 
      :effect             (and (msg ?p) 
                               (forall ?g - agent 
                                   [?g](survivorat ?s ?p)))
    ) 

    (:action badcommsurvivor
      :derive-condition   always
      :parameters         (?p - pos ?a - agent  ?s - survivor)
      :precondition       (and (at ?a ?p) [?a](survivorat ?s ?p)) 
      :effect             (and (msg ?p) 
                               (forall ?g - agent 
                                   (when (!at ?g ?p) [?g](!survivorat ?s ?p))))
    )



)




