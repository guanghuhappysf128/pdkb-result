

(define (domain envelope)
    (:objects
    )
    
    (:agents
        alice bob
    )
    
  (:predicates  (secret) (bob_turn) (alice_turn))
   
    (:action check_alice
        :category (ontic)
        :parameters ()
        :precondition (and (alice_turn) (alice_waiting))
        :effect (<{(True)} {(and (bob_turn) (not (alice_turn)) (not (alice_waiting)))}>
                 <{(True)} {(K_bob (or (K_alice (secret)) (K_alice (not (secret)))))}>
                 <{(secret)} {(K_alice (secret))}>
                 <{(!secret)} {(K_alice (!secret))}>)
    )

    (:action check_bob
        :category (ontic)
        :parameters ()
        :precondition (and (bob_turn) (bob_waiting))
        :effect (<{(True)} {(and (alice_turn) (not (bob_turn)) (not (bob_waiting)))}>
                 <{(True)} {(K_alice (or (K_bob (secret)) (K_bob (not (secret)))))}>
                 <{(secret)} {(K_bob (secret))}>
                 <{(!secret)} {(K_bob (!secret))}>)
    )

    (:init
      (and

        (secret) (alice_waiting) (bob_waiting)
        
        ; Uncomment just the alice_turn line for the past.pdkbddl example
        ; Uncomment just the bob_turn line for the future.pdkbddl example
        (alice_turn)
        ;(bob_turn)

        (DK_alice (secret))
        (DK_alice (not (secret)))
        (DK_bob (secret))
        (DK_bob (not (secret)))
        
        (K_bob (DK_alice (secret)))
        (K_bob (DK_alice (not (secret))))
        (K_alice (DK_bob (secret)))
        (K_alice (DK_bob (not (secret))))

      )
    )

    (:constraint (True)
    )
    
    (:goal (K_bob (K_alice (secret))))
)

